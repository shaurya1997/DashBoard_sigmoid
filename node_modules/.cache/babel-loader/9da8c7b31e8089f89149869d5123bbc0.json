{"ast":null,"code":"import axios from\"axios\";import{LOGIN_ERROR,SET_USER,SET_LOADING,LOGOUT}from\"./ActionType\";import{toastr}from\"react-redux-toastr\";export var loginUser=function loginUser(email,password,rememberMe){return function(dispatch){dispatch({type:SET_LOADING,value:true});axios.post(\"https://sigviewauth.sigmoid.io/signIn\",{email:email,password:password,rememberMe:rememberMe}).then(function(response){toastr.success(\"\",\"Sign Up SuccessFull\");dispatch({type:SET_USER,data:response.data});if(rememberMe){localStorage.setItem(\"access_token\",response.data.token);}else{sessionStorage.setItem(\"access_token\",response.data.token);}}).catch(function(error){toastr.error(\"\",\"Wrong email or password\");dispatch({type:LOGIN_ERROR,data:error.response.data.statusMessage});});};};export var logout=function logout(){return function(dispatch){localStorage.clear();sessionStorage.clear();dispatch({type:LOGOUT});};};export var setLoading=function setLoading(value){return function(dispatch){dispatch({type:SET_LOADING,value:value});};};","map":{"version":3,"sources":["/home/rails/Desktop/DashBoard_sigmoid/sigmoid-assignment/src/Store/Action/UserAction.js"],"names":["axios","LOGIN_ERROR","SET_USER","SET_LOADING","LOGOUT","toastr","loginUser","email","password","rememberMe","dispatch","type","value","post","then","response","success","data","localStorage","setItem","token","sessionStorage","catch","error","statusMessage","logout","clear","setLoading"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,WAAT,CAAsBC,QAAtB,CAAgCC,WAAhC,CAA6CC,MAA7C,KAA2D,cAA3D,CACA,OAASC,MAAT,KAAuB,oBAAvB,CAEA,MAAO,IAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACC,KAAD,CAAQC,QAAR,CAAkBC,UAAlB,CAAiC,CACxD,MAAO,UAACC,QAAD,CAAc,CACnBA,QAAQ,CAAC,CAAEC,IAAI,CAAER,WAAR,CAAqBS,KAAK,CAAE,IAA5B,CAAD,CAAR,CACAZ,KAAK,CACFa,IADH,CACQ,uCADR,CACiD,CAC7CN,KAAK,CAALA,KAD6C,CAE7CC,QAAQ,CAARA,QAF6C,CAG7CC,UAAU,CAAVA,UAH6C,CADjD,EAMGK,IANH,CAMQ,SAACC,QAAD,CAAc,CAClBV,MAAM,CAACW,OAAP,CAAe,EAAf,CAAmB,qBAAnB,EACAN,QAAQ,CAAC,CAAEC,IAAI,CAAET,QAAR,CAAkBe,IAAI,CAAEF,QAAQ,CAACE,IAAjC,CAAD,CAAR,CACA,GAAIR,UAAJ,CAAgB,CACdS,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAqCJ,QAAQ,CAACE,IAAT,CAAcG,KAAnD,EACD,CAFD,IAEO,CACLC,cAAc,CAACF,OAAf,CAAuB,cAAvB,CAAuCJ,QAAQ,CAACE,IAAT,CAAcG,KAArD,EACD,CACF,CAdH,EAeGE,KAfH,CAeS,SAACC,KAAD,CAAW,CAChBlB,MAAM,CAACkB,KAAP,CAAa,EAAb,CAAiB,yBAAjB,EAEAb,QAAQ,CAAC,CACPC,IAAI,CAAEV,WADC,CAEPgB,IAAI,CAAEM,KAAK,CAACR,QAAN,CAAeE,IAAf,CAAoBO,aAFnB,CAAD,CAAR,CAID,CAtBH,EAuBD,CAzBD,CA0BD,CA3BM,CA6BP,MAAO,IAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,EAAM,CAC1B,MAAO,UAACf,QAAD,CAAc,CACnBQ,YAAY,CAACQ,KAAb,GACAL,cAAc,CAACK,KAAf,GACAhB,QAAQ,CAAC,CAAEC,IAAI,CAAEP,MAAR,CAAD,CAAR,CACD,CAJD,CAKD,CANM,CAQP,MAAO,IAAMuB,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACf,KAAD,CAAW,CACnC,MAAO,UAACF,QAAD,CAAc,CACnBA,QAAQ,CAAC,CAAEC,IAAI,CAAER,WAAR,CAAqBS,KAAK,CAAEA,KAA5B,CAAD,CAAR,CACD,CAFD,CAGD,CAJM","sourcesContent":["import axios from \"axios\";\nimport { LOGIN_ERROR, SET_USER, SET_LOADING, LOGOUT } from \"./ActionType\";\nimport { toastr } from \"react-redux-toastr\";\n\nexport const loginUser = (email, password, rememberMe) => {\n  return (dispatch) => {\n    dispatch({ type: SET_LOADING, value: true });\n    axios\n      .post(\"https://sigviewauth.sigmoid.io/signIn\", {\n        email,\n        password,\n        rememberMe,\n      })\n      .then((response) => {\n        toastr.success(\"\", \"Sign Up SuccessFull\");\n        dispatch({ type: SET_USER, data: response.data });\n        if (rememberMe) {\n          localStorage.setItem(\"access_token\", response.data.token);\n        } else {\n          sessionStorage.setItem(\"access_token\", response.data.token);\n        }\n      })\n      .catch((error) => {\n        toastr.error(\"\", \"Wrong email or password\");\n\n        dispatch({\n          type: LOGIN_ERROR,\n          data: error.response.data.statusMessage,\n        });\n      });\n  };\n};\n\nexport const logout = () => {\n  return (dispatch) => {\n    localStorage.clear();\n    sessionStorage.clear();\n    dispatch({ type: LOGOUT });\n  };\n};\n\nexport const setLoading = (value) => {\n  return (dispatch) => {\n    dispatch({ type: SET_LOADING, value: value });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}