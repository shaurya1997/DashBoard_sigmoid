{"ast":null,"code":"import { LOGOUT, SET_DASH_LOADING, SET_DASHBOARD_DATA } from \"./ActionType\";\nimport JwtService from \"../../JwtService/JwtService\";\nimport { tableData, barData, pieData } from \"../../config\";\nimport { toastr } from \"react-redux-toastr\";\nimport { logout } from \"./UserAction\";\nexport const getDashBoardData = (startDate, endDate) => {\n  return dispatch => {\n    const dateRange = {\n      startDate,\n      endDate\n    };\n    dispatch({\n      type: SET_DASH_LOADING\n    });\n    let tablePayload = { ...tableData,\n      chartObject: { ...tableData.chartObject,\n        requestParam: { ...tableData.chartObject.requestParam,\n          dateRange\n        }\n      }\n    };\n    let barPayload = { ...barData,\n      chartObject: { ...barData.chartObject,\n        requestParam: { ...barData.chartObject.requestParam,\n          dateRange\n        }\n      }\n    };\n    let piePayload = { ...pieData,\n      chartObject: { ...pieData.chartObject,\n        requestParam: { ...pieData.chartObject.requestParam,\n          dateRange\n        }\n      }\n    };\n    let table = JwtService.post(\"/getData\", tablePayload);\n    let bar = JwtService.post(\"/getData\", barPayload);\n    let pie = JwtService.post(\"/getData\", piePayload);\n    Promise.all([table, bar, pie]).then(res => {\n      dispatch({\n        type: SET_DASHBOARD_DATA,\n        value: res\n      });\n    }).catch(error => {\n      if (error && error.response && error.response.status == 401) {\n        toastr.error(\"\", \"something went wrong\");\n        dispatch(logout());\n        window.location.href = \"/\";\n      } else {\n        console.log(\"error\", error);\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/home/rails/Desktop/sigmoid-assignment/src/Store/Action/DashDataAction.js"],"names":["LOGOUT","SET_DASH_LOADING","SET_DASHBOARD_DATA","JwtService","tableData","barData","pieData","toastr","logout","getDashBoardData","startDate","endDate","dispatch","dateRange","type","tablePayload","chartObject","requestParam","barPayload","piePayload","table","post","bar","pie","Promise","all","then","res","value","catch","error","response","status","window","location","href","console","log"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,gBAAjB,EAAmCC,kBAAnC,QAA6D,cAA7D;AACA,OAAOC,UAAP,MAAuB,6BAAvB;AACA,SAASC,SAAT,EAAoBC,OAApB,EAA6BC,OAA7B,QAA4C,cAA5C;AACA,SAASC,MAAT,QAAuB,oBAAvB;AACA,SAASC,MAAT,QAAuB,cAAvB;AAEA,OAAO,MAAMC,gBAAgB,GAAG,CAACC,SAAD,EAAYC,OAAZ,KAAwB;AACtD,SAAQC,QAAD,IAAc;AACnB,UAAMC,SAAS,GAAG;AAChBH,MAAAA,SADgB;AAEhBC,MAAAA;AAFgB,KAAlB;AAKAC,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEb;AAAR,KAAD,CAAR;AAEA,QAAIc,YAAY,GAAG,EACjB,GAAGX,SADc;AAEjBY,MAAAA,WAAW,EAAE,EACX,GAAGZ,SAAS,CAACY,WADF;AAEXC,QAAAA,YAAY,EAAE,EACZ,GAAGb,SAAS,CAACY,WAAV,CAAsBC,YADb;AAEZJ,UAAAA;AAFY;AAFH;AAFI,KAAnB;AAUA,QAAIK,UAAU,GAAG,EACf,GAAGb,OADY;AAEfW,MAAAA,WAAW,EAAE,EACX,GAAGX,OAAO,CAACW,WADA;AAEXC,QAAAA,YAAY,EAAE,EACZ,GAAGZ,OAAO,CAACW,WAAR,CAAoBC,YADX;AAEZJ,UAAAA;AAFY;AAFH;AAFE,KAAjB;AAUA,QAAIM,UAAU,GAAG,EACf,GAAGb,OADY;AAEfU,MAAAA,WAAW,EAAE,EACX,GAAGV,OAAO,CAACU,WADA;AAEXC,QAAAA,YAAY,EAAE,EACZ,GAAGX,OAAO,CAACU,WAAR,CAAoBC,YADX;AAEZJ,UAAAA;AAFY;AAFH;AAFE,KAAjB;AAWA,QAAIO,KAAK,GAAGjB,UAAU,CAACkB,IAAX,CAAgB,UAAhB,EAA4BN,YAA5B,CAAZ;AACA,QAAIO,GAAG,GAAGnB,UAAU,CAACkB,IAAX,CAAgB,UAAhB,EAA4BH,UAA5B,CAAV;AACA,QAAIK,GAAG,GAAGpB,UAAU,CAACkB,IAAX,CAAgB,UAAhB,EAA4BF,UAA5B,CAAV;AAEAK,IAAAA,OAAO,CAACC,GAAR,CAAY,CAACL,KAAD,EAAQE,GAAR,EAAaC,GAAb,CAAZ,EACGG,IADH,CACSC,GAAD,IAAS;AACbf,MAAAA,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAEZ,kBAAR;AAA4B0B,QAAAA,KAAK,EAAED;AAAnC,OAAD,CAAR;AACD,KAHH,EAIGE,KAJH,CAIUC,KAAD,IAAW;AAChB,UAAIA,KAAK,IAAIA,KAAK,CAACC,QAAf,IAA2BD,KAAK,CAACC,QAAN,CAAeC,MAAf,IAAyB,GAAxD,EAA6D;AAC3DzB,QAAAA,MAAM,CAACuB,KAAP,CAAa,EAAb,EAAiB,sBAAjB;AACAlB,QAAAA,QAAQ,CAACJ,MAAM,EAAP,CAAR;AACAyB,QAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,GAAvB;AACD,OAJD,MAIO;AACLC,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBP,KAArB;AACD;AACF,KAZH;AAaD,GAxDD;AAyDD,CA1DM","sourcesContent":["import { LOGOUT, SET_DASH_LOADING, SET_DASHBOARD_DATA } from \"./ActionType\";\nimport JwtService from \"../../JwtService/JwtService\";\nimport { tableData, barData, pieData } from \"../../config\";\nimport { toastr } from \"react-redux-toastr\";\nimport { logout } from \"./UserAction\";\n\nexport const getDashBoardData = (startDate, endDate) => {\n  return (dispatch) => {\n    const dateRange = {\n      startDate,\n      endDate,\n    };\n\n    dispatch({ type: SET_DASH_LOADING });\n\n    let tablePayload = {\n      ...tableData,\n      chartObject: {\n        ...tableData.chartObject,\n        requestParam: {\n          ...tableData.chartObject.requestParam,\n          dateRange,\n        },\n      },\n    };\n    let barPayload = {\n      ...barData,\n      chartObject: {\n        ...barData.chartObject,\n        requestParam: {\n          ...barData.chartObject.requestParam,\n          dateRange,\n        },\n      },\n    };\n    let piePayload = {\n      ...pieData,\n      chartObject: {\n        ...pieData.chartObject,\n        requestParam: {\n          ...pieData.chartObject.requestParam,\n          dateRange,\n        },\n      },\n    };\n\n    let table = JwtService.post(\"/getData\", tablePayload);\n    let bar = JwtService.post(\"/getData\", barPayload);\n    let pie = JwtService.post(\"/getData\", piePayload);\n\n    Promise.all([table, bar, pie])\n      .then((res) => {\n        dispatch({ type: SET_DASHBOARD_DATA, value: res });\n      })\n      .catch((error) => {\n        if (error && error.response && error.response.status == 401) {\n          toastr.error(\"\", \"something went wrong\");\n          dispatch(logout());\n          window.location.href = \"/\";\n        } else {\n          console.log(\"error\", error);\n        }\n      });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}