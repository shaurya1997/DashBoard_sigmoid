{"ast":null,"code":"import { LOGOUT, SET_DASH_LOADING } from \"./ActionType\";\nimport JwtService from \"../../JwtService/JwtService\";\nimport { tableData, barData, pieData } from \"../../config\";\nimport { toastr } from \"react-redux-toastr\";\nexport const getDashBoardData = (startDate, endDate) => {\n  return dispatch => {\n    const dateRange = {\n      startDate,\n      endDate\n    };\n    dispatch({\n      type: SET_DASH_LOADING\n    });\n    let tablePayload = { ...tableData,\n      chartObject: { ...tableData.chartObject,\n        requestParam: { ...tableData.chartObject.requestParam,\n          dateRange\n        }\n      }\n    };\n    let barPayload = { ...barData,\n      chartObject: { ...barData.chartObject,\n        requestParam: { ...barData.chartObject.requestParam,\n          dateRange\n        }\n      }\n    };\n    let piePayload = { ...pieData,\n      chartObject: { ...pieData.chartObject,\n        requestParam: { ...pieData.chartObject.requestParam,\n          dateRange\n        }\n      }\n    };\n    let table = JwtService.post(\"/getData\", tablePayload);\n    let bar = JwtService.post(\"/getData\", barPayload);\n    let pie = JwtService.post(\"/getData\", piePayload);\n    Promise.all([table, bar, pie]).then(response => {//dispatch({ type: SET_DASHBOARD_DATA, payload: response });\n    }).catch(error => {\n      var _error$response;\n\n      if ((error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) == 401) {\n        dispatch({\n          type: LOGOUT\n        });\n        toastr.error(\"\", \"something went wrong\");\n      } else {\n        console.log(\"error\", error);\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/home/rails/Desktop/sigmoid-assignment/src/Store/Action/DashDataAction.js"],"names":["LOGOUT","SET_DASH_LOADING","JwtService","tableData","barData","pieData","toastr","getDashBoardData","startDate","endDate","dispatch","dateRange","type","tablePayload","chartObject","requestParam","barPayload","piePayload","table","post","bar","pie","Promise","all","then","response","catch","error","status","console","log"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,gBAAjB,QAAyC,cAAzC;AACA,OAAOC,UAAP,MAAuB,6BAAvB;AACA,SAASC,SAAT,EAAoBC,OAApB,EAA6BC,OAA7B,QAA4C,cAA5C;AACA,SAASC,MAAT,QAAuB,oBAAvB;AAEA,OAAO,MAAMC,gBAAgB,GAAG,CAACC,SAAD,EAAYC,OAAZ,KAAwB;AACtD,SAAQC,QAAD,IAAc;AACnB,UAAMC,SAAS,GAAG;AAChBH,MAAAA,SADgB;AAEhBC,MAAAA;AAFgB,KAAlB;AAIAC,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEX;AAAR,KAAD,CAAR;AAEA,QAAIY,YAAY,GAAG,EACjB,GAAGV,SADc;AAEjBW,MAAAA,WAAW,EAAE,EACX,GAAGX,SAAS,CAACW,WADF;AAEXC,QAAAA,YAAY,EAAE,EACZ,GAAGZ,SAAS,CAACW,WAAV,CAAsBC,YADb;AAEZJ,UAAAA;AAFY;AAFH;AAFI,KAAnB;AAUA,QAAIK,UAAU,GAAG,EACf,GAAGZ,OADY;AAEfU,MAAAA,WAAW,EAAE,EACX,GAAGV,OAAO,CAACU,WADA;AAEXC,QAAAA,YAAY,EAAE,EACZ,GAAGX,OAAO,CAACU,WAAR,CAAoBC,YADX;AAEZJ,UAAAA;AAFY;AAFH;AAFE,KAAjB;AAUA,QAAIM,UAAU,GAAG,EACf,GAAGZ,OADY;AAEfS,MAAAA,WAAW,EAAE,EACX,GAAGT,OAAO,CAACS,WADA;AAEXC,QAAAA,YAAY,EAAE,EACZ,GAAGV,OAAO,CAACS,WAAR,CAAoBC,YADX;AAEZJ,UAAAA;AAFY;AAFH;AAFE,KAAjB;AAUA,QAAIO,KAAK,GAAGhB,UAAU,CAACiB,IAAX,CAAgB,UAAhB,EAA4BN,YAA5B,CAAZ;AACA,QAAIO,GAAG,GAAGlB,UAAU,CAACiB,IAAX,CAAgB,UAAhB,EAA4BH,UAA5B,CAAV;AACA,QAAIK,GAAG,GAAGnB,UAAU,CAACiB,IAAX,CAAgB,UAAhB,EAA4BF,UAA5B,CAAV;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY,CAACL,KAAD,EAAQE,GAAR,EAAaC,GAAb,CAAZ,EACGG,IADH,CACSC,QAAD,IAAc,CAClB;AACD,KAHH,EAIGC,KAJH,CAIUC,KAAD,IAAW;AAAA;;AAChB,UAAI,CAAAA,KAAK,SAAL,IAAAA,KAAK,WAAL,+BAAAA,KAAK,CAAEF,QAAP,oEAAiBG,MAAjB,KAA2B,GAA/B,EAAoC;AAClClB,QAAAA,QAAQ,CAAC;AAAEE,UAAAA,IAAI,EAAEZ;AAAR,SAAD,CAAR;AACAM,QAAAA,MAAM,CAACqB,KAAP,CAAa,EAAb,EAAiB,sBAAjB;AACD,OAHD,MAGO;AACLE,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBH,KAArB;AACD;AACF,KAXH;AAYD,GApDD;AAqDD,CAtDM","sourcesContent":["import { LOGOUT, SET_DASH_LOADING } from \"./ActionType\";\nimport JwtService from \"../../JwtService/JwtService\";\nimport { tableData, barData, pieData } from \"../../config\";\nimport { toastr } from \"react-redux-toastr\";\n\nexport const getDashBoardData = (startDate, endDate) => {\n  return (dispatch) => {\n    const dateRange = {\n      startDate,\n      endDate,\n    };\n    dispatch({ type: SET_DASH_LOADING });\n\n    let tablePayload = {\n      ...tableData,\n      chartObject: {\n        ...tableData.chartObject,\n        requestParam: {\n          ...tableData.chartObject.requestParam,\n          dateRange,\n        },\n      },\n    };\n    let barPayload = {\n      ...barData,\n      chartObject: {\n        ...barData.chartObject,\n        requestParam: {\n          ...barData.chartObject.requestParam,\n          dateRange,\n        },\n      },\n    };\n    let piePayload = {\n      ...pieData,\n      chartObject: {\n        ...pieData.chartObject,\n        requestParam: {\n          ...pieData.chartObject.requestParam,\n          dateRange,\n        },\n      },\n    };\n    let table = JwtService.post(\"/getData\", tablePayload);\n    let bar = JwtService.post(\"/getData\", barPayload);\n    let pie = JwtService.post(\"/getData\", piePayload);\n    Promise.all([table, bar, pie])\n      .then((response) => {\n        //dispatch({ type: SET_DASHBOARD_DATA, payload: response });\n      })\n      .catch((error) => {\n        if (error?.response?.status == 401) {\n          dispatch({ type: LOGOUT });\n          toastr.error(\"\", \"something went wrong\");\n        } else {\n          console.log(\"error\", error);\n        }\n      });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}