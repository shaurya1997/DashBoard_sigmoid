{"ast":null,"code":"import _objectSpread from\"/home/rails/Desktop/DashBoard_sigmoid/sigmoid-assignment/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{LOGOUT,SET_DASH_LOADING,SET_DASHBOARD_DATA}from\"./ActionType\";import JwtService from\"../../JwtService/JwtService\";import{tableData,barData,pieData}from\"../../config\";import{toastr}from\"react-redux-toastr\";import{logout}from\"./UserAction\";export var getDashBoardData=function getDashBoardData(startDate,endDate){return function(dispatch){var dateRange={startDate:startDate,endDate:endDate};dispatch({type:SET_DASH_LOADING});var tablePayload=_objectSpread(_objectSpread({},tableData),{},{chartObject:_objectSpread(_objectSpread({},tableData.chartObject),{},{requestParam:_objectSpread(_objectSpread({},tableData.chartObject.requestParam),{},{dateRange:dateRange})})});var barPayload=_objectSpread(_objectSpread({},barData),{},{chartObject:_objectSpread(_objectSpread({},barData.chartObject),{},{requestParam:_objectSpread(_objectSpread({},barData.chartObject.requestParam),{},{dateRange:dateRange})})});var piePayload=_objectSpread(_objectSpread({},pieData),{},{chartObject:_objectSpread(_objectSpread({},pieData.chartObject),{},{requestParam:_objectSpread(_objectSpread({},pieData.chartObject.requestParam),{},{dateRange:dateRange})})});var table=JwtService.post(\"/getData\",tablePayload);var bar=JwtService.post(\"/getData\",barPayload);var pie=JwtService.post(\"/getData\",piePayload);Promise.all([table,bar,pie]).then(function(res){dispatch({type:SET_DASHBOARD_DATA,value:res});}).catch(function(error){if(error&&error.response&&error.response.status==401){toastr.error(\"\",\"something went wrong\");dispatch(logout());window.location.href=\"/\";}else{console.log(\"error\",error);}});};};","map":{"version":3,"sources":["/home/rails/Desktop/DashBoard_sigmoid/sigmoid-assignment/src/Store/Action/DashDataAction.js"],"names":["LOGOUT","SET_DASH_LOADING","SET_DASHBOARD_DATA","JwtService","tableData","barData","pieData","toastr","logout","getDashBoardData","startDate","endDate","dispatch","dateRange","type","tablePayload","chartObject","requestParam","barPayload","piePayload","table","post","bar","pie","Promise","all","then","res","value","catch","error","response","status","window","location","href","console","log"],"mappings":"6IAAA,OAASA,MAAT,CAAiBC,gBAAjB,CAAmCC,kBAAnC,KAA6D,cAA7D,CACA,MAAOC,CAAAA,UAAP,KAAuB,6BAAvB,CACA,OAASC,SAAT,CAAoBC,OAApB,CAA6BC,OAA7B,KAA4C,cAA5C,CACA,OAASC,MAAT,KAAuB,oBAAvB,CACA,OAASC,MAAT,KAAuB,cAAvB,CAEA,MAAO,IAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,SAAD,CAAYC,OAAZ,CAAwB,CACtD,MAAO,UAACC,QAAD,CAAc,CACnB,GAAMC,CAAAA,SAAS,CAAG,CAChBH,SAAS,CAATA,SADgB,CAEhBC,OAAO,CAAPA,OAFgB,CAAlB,CAKAC,QAAQ,CAAC,CAAEE,IAAI,CAAEb,gBAAR,CAAD,CAAR,CAEA,GAAIc,CAAAA,YAAY,gCACXX,SADW,MAEdY,WAAW,gCACNZ,SAAS,CAACY,WADJ,MAETC,YAAY,gCACPb,SAAS,CAACY,WAAV,CAAsBC,YADf,MAEVJ,SAAS,CAATA,SAFU,EAFH,EAFG,EAAhB,CAUA,GAAIK,CAAAA,UAAU,gCACTb,OADS,MAEZW,WAAW,gCACNX,OAAO,CAACW,WADF,MAETC,YAAY,gCACPZ,OAAO,CAACW,WAAR,CAAoBC,YADb,MAEVJ,SAAS,CAATA,SAFU,EAFH,EAFC,EAAd,CAUA,GAAIM,CAAAA,UAAU,gCACTb,OADS,MAEZU,WAAW,gCACNV,OAAO,CAACU,WADF,MAETC,YAAY,gCACPX,OAAO,CAACU,WAAR,CAAoBC,YADb,MAEVJ,SAAS,CAATA,SAFU,EAFH,EAFC,EAAd,CAWA,GAAIO,CAAAA,KAAK,CAAGjB,UAAU,CAACkB,IAAX,CAAgB,UAAhB,CAA4BN,YAA5B,CAAZ,CACA,GAAIO,CAAAA,GAAG,CAAGnB,UAAU,CAACkB,IAAX,CAAgB,UAAhB,CAA4BH,UAA5B,CAAV,CACA,GAAIK,CAAAA,GAAG,CAAGpB,UAAU,CAACkB,IAAX,CAAgB,UAAhB,CAA4BF,UAA5B,CAAV,CAEAK,OAAO,CAACC,GAAR,CAAY,CAACL,KAAD,CAAQE,GAAR,CAAaC,GAAb,CAAZ,EACGG,IADH,CACQ,SAACC,GAAD,CAAS,CACbf,QAAQ,CAAC,CAAEE,IAAI,CAAEZ,kBAAR,CAA4B0B,KAAK,CAAED,GAAnC,CAAD,CAAR,CACD,CAHH,EAIGE,KAJH,CAIS,SAACC,KAAD,CAAW,CAChB,GAAIA,KAAK,EAAIA,KAAK,CAACC,QAAf,EAA2BD,KAAK,CAACC,QAAN,CAAeC,MAAf,EAAyB,GAAxD,CAA6D,CAC3DzB,MAAM,CAACuB,KAAP,CAAa,EAAb,CAAiB,sBAAjB,EACAlB,QAAQ,CAACJ,MAAM,EAAP,CAAR,CACAyB,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAuB,GAAvB,CACD,CAJD,IAIO,CACLC,OAAO,CAACC,GAAR,CAAY,OAAZ,CAAqBP,KAArB,EACD,CACF,CAZH,EAaD,CAxDD,CAyDD,CA1DM","sourcesContent":["import { LOGOUT, SET_DASH_LOADING, SET_DASHBOARD_DATA } from \"./ActionType\";\nimport JwtService from \"../../JwtService/JwtService\";\nimport { tableData, barData, pieData } from \"../../config\";\nimport { toastr } from \"react-redux-toastr\";\nimport { logout } from \"./UserAction\";\n\nexport const getDashBoardData = (startDate, endDate) => {\n  return (dispatch) => {\n    const dateRange = {\n      startDate,\n      endDate,\n    };\n\n    dispatch({ type: SET_DASH_LOADING });\n\n    let tablePayload = {\n      ...tableData,\n      chartObject: {\n        ...tableData.chartObject,\n        requestParam: {\n          ...tableData.chartObject.requestParam,\n          dateRange,\n        },\n      },\n    };\n    let barPayload = {\n      ...barData,\n      chartObject: {\n        ...barData.chartObject,\n        requestParam: {\n          ...barData.chartObject.requestParam,\n          dateRange,\n        },\n      },\n    };\n    let piePayload = {\n      ...pieData,\n      chartObject: {\n        ...pieData.chartObject,\n        requestParam: {\n          ...pieData.chartObject.requestParam,\n          dateRange,\n        },\n      },\n    };\n\n    let table = JwtService.post(\"/getData\", tablePayload);\n    let bar = JwtService.post(\"/getData\", barPayload);\n    let pie = JwtService.post(\"/getData\", piePayload);\n\n    Promise.all([table, bar, pie])\n      .then((res) => {\n        dispatch({ type: SET_DASHBOARD_DATA, value: res });\n      })\n      .catch((error) => {\n        if (error && error.response && error.response.status == 401) {\n          toastr.error(\"\", \"something went wrong\");\n          dispatch(logout());\n          window.location.href = \"/\";\n        } else {\n          console.log(\"error\", error);\n        }\n      });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}