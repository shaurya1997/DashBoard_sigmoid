{"ast":null,"code":"import _slicedToArray from \"/home/rails/Desktop/DashBoard_sigmoid/sigmoid-assignment/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useOpenState } from './useOpenState';\nimport { useUtils } from './useUtils';\nexport function usePickerState(props, valueManager) {\n  var disableCloseOnSelect = props.disableCloseOnSelect,\n      onAccept = props.onAccept,\n      onChange = props.onChange,\n      value = props.value;\n  var utils = useUtils();\n\n  var _useOpenState = useOpenState(props),\n      isOpen = _useOpenState.isOpen,\n      setIsOpen = _useOpenState.setIsOpen;\n\n  function initDraftableDate(date) {\n    return {\n      committed: date,\n      draft: date\n    };\n  }\n\n  var parsedDateValue = valueManager.parseInput(utils, value);\n\n  var _React$useReducer = React.useReducer(function (state, action) {\n    switch (action.type) {\n      case 'reset':\n        return initDraftableDate(action.payload);\n\n      case 'update':\n        return _extends({}, state, {\n          draft: action.payload\n        });\n\n      default:\n        return state;\n    }\n  }, parsedDateValue, initDraftableDate),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      draftState = _React$useReducer2[0],\n      dispatch = _React$useReducer2[1];\n\n  if (!valueManager.areValuesEqual(utils, draftState.committed, parsedDateValue)) {\n    dispatch({\n      type: 'reset',\n      payload: parsedDateValue\n    });\n  }\n\n  var _React$useState = React.useState(draftState.committed),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      initialDate = _React$useState2[0],\n      setInitialDate = _React$useState2[1]; // Mobile keyboard view is a special case.\n  // When it's open picker should work like closed, cause we are just showing text field\n\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      isMobileKeyboardViewOpen = _React$useState4[0],\n      setMobileKeyboardViewOpen = _React$useState4[1];\n\n  var acceptDate = React.useCallback(function (acceptedDate, needClosePicker) {\n    onChange(acceptedDate);\n\n    if (needClosePicker) {\n      setIsOpen(false);\n      setInitialDate(acceptedDate);\n\n      if (onAccept) {\n        onAccept(acceptedDate);\n      }\n    }\n  }, [onAccept, onChange, setIsOpen]);\n  var wrapperProps = React.useMemo(function () {\n    return {\n      open: isOpen,\n      onClear: function onClear() {\n        return acceptDate(valueManager.emptyValue, true);\n      },\n      onAccept: function onAccept() {\n        return acceptDate(draftState.draft, true);\n      },\n      onDismiss: function onDismiss() {\n        return acceptDate(initialDate, true);\n      },\n      onSetToday: function onSetToday() {\n        var now = utils.date();\n        dispatch({\n          type: 'update',\n          payload: now\n        });\n        acceptDate(now, !disableCloseOnSelect);\n      }\n    };\n  }, [acceptDate, disableCloseOnSelect, isOpen, utils, draftState.draft, valueManager.emptyValue, initialDate]);\n  var pickerProps = React.useMemo(function () {\n    return {\n      date: draftState.draft,\n      isMobileKeyboardViewOpen: isMobileKeyboardViewOpen,\n      toggleMobileKeyboardView: function toggleMobileKeyboardView() {\n        return setMobileKeyboardViewOpen(!isMobileKeyboardViewOpen);\n      },\n      onDateChange: function onDateChange(newDate, wrapperVariant) {\n        var selectionState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'partial';\n        dispatch({\n          type: 'update',\n          payload: newDate\n        });\n\n        if (selectionState === 'partial') {\n          acceptDate(newDate, false);\n        }\n\n        if (selectionState === 'finish') {\n          var shouldCloseOnSelect = !(disableCloseOnSelect != null ? disableCloseOnSelect : wrapperVariant === 'mobile');\n          acceptDate(newDate, shouldCloseOnSelect);\n        } // if selectionState === \"shallow\" do nothing (we already update the draft state)\n\n      }\n    };\n  }, [acceptDate, disableCloseOnSelect, isMobileKeyboardViewOpen, draftState.draft]);\n  var inputProps = React.useMemo(function () {\n    return {\n      onChange: onChange,\n      open: isOpen,\n      rawValue: value,\n      openPicker: function openPicker() {\n        return setIsOpen(true);\n      }\n    };\n  }, [onChange, isOpen, value, setIsOpen]);\n  var pickerState = {\n    pickerProps: pickerProps,\n    inputProps: inputProps,\n    wrapperProps: wrapperProps\n  };\n  React.useDebugValue(pickerState, function () {\n    return {\n      MuiPickerState: {\n        pickerDraft: draftState,\n        other: pickerState\n      }\n    };\n  });\n  return pickerState;\n}","map":{"version":3,"sources":["/home/rails/Desktop/DashBoard_sigmoid/sigmoid-assignment/node_modules/@mui/lab/internal/pickers/hooks/usePickerState.js"],"names":["_extends","React","useOpenState","useUtils","usePickerState","props","valueManager","disableCloseOnSelect","onAccept","onChange","value","utils","isOpen","setIsOpen","initDraftableDate","date","committed","draft","parsedDateValue","parseInput","useReducer","state","action","type","payload","draftState","dispatch","areValuesEqual","useState","initialDate","setInitialDate","isMobileKeyboardViewOpen","setMobileKeyboardViewOpen","acceptDate","useCallback","acceptedDate","needClosePicker","wrapperProps","useMemo","open","onClear","emptyValue","onDismiss","onSetToday","now","pickerProps","toggleMobileKeyboardView","onDateChange","newDate","wrapperVariant","selectionState","shouldCloseOnSelect","inputProps","rawValue","openPicker","pickerState","useDebugValue","MuiPickerState","pickerDraft","other"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useOpenState } from './useOpenState';\nimport { useUtils } from './useUtils';\nexport function usePickerState(props, valueManager) {\n  const {\n    disableCloseOnSelect,\n    onAccept,\n    onChange,\n    value\n  } = props;\n  const utils = useUtils();\n  const {\n    isOpen,\n    setIsOpen\n  } = useOpenState(props);\n\n  function initDraftableDate(date) {\n    return {\n      committed: date,\n      draft: date\n    };\n  }\n\n  const parsedDateValue = valueManager.parseInput(utils, value);\n  const [draftState, dispatch] = React.useReducer((state, action) => {\n    switch (action.type) {\n      case 'reset':\n        return initDraftableDate(action.payload);\n\n      case 'update':\n        return _extends({}, state, {\n          draft: action.payload\n        });\n\n      default:\n        return state;\n    }\n  }, parsedDateValue, initDraftableDate);\n\n  if (!valueManager.areValuesEqual(utils, draftState.committed, parsedDateValue)) {\n    dispatch({\n      type: 'reset',\n      payload: parsedDateValue\n    });\n  }\n\n  const [initialDate, setInitialDate] = React.useState(draftState.committed); // Mobile keyboard view is a special case.\n  // When it's open picker should work like closed, cause we are just showing text field\n\n  const [isMobileKeyboardViewOpen, setMobileKeyboardViewOpen] = React.useState(false);\n  const acceptDate = React.useCallback((acceptedDate, needClosePicker) => {\n    onChange(acceptedDate);\n\n    if (needClosePicker) {\n      setIsOpen(false);\n      setInitialDate(acceptedDate);\n\n      if (onAccept) {\n        onAccept(acceptedDate);\n      }\n    }\n  }, [onAccept, onChange, setIsOpen]);\n  const wrapperProps = React.useMemo(() => ({\n    open: isOpen,\n    onClear: () => acceptDate(valueManager.emptyValue, true),\n    onAccept: () => acceptDate(draftState.draft, true),\n    onDismiss: () => acceptDate(initialDate, true),\n    onSetToday: () => {\n      const now = utils.date();\n      dispatch({\n        type: 'update',\n        payload: now\n      });\n      acceptDate(now, !disableCloseOnSelect);\n    }\n  }), [acceptDate, disableCloseOnSelect, isOpen, utils, draftState.draft, valueManager.emptyValue, initialDate]);\n  const pickerProps = React.useMemo(() => ({\n    date: draftState.draft,\n    isMobileKeyboardViewOpen,\n    toggleMobileKeyboardView: () => setMobileKeyboardViewOpen(!isMobileKeyboardViewOpen),\n    onDateChange: (newDate, wrapperVariant, selectionState = 'partial') => {\n      dispatch({\n        type: 'update',\n        payload: newDate\n      });\n\n      if (selectionState === 'partial') {\n        acceptDate(newDate, false);\n      }\n\n      if (selectionState === 'finish') {\n        const shouldCloseOnSelect = !(disableCloseOnSelect != null ? disableCloseOnSelect : wrapperVariant === 'mobile');\n        acceptDate(newDate, shouldCloseOnSelect);\n      } // if selectionState === \"shallow\" do nothing (we already update the draft state)\n\n    }\n  }), [acceptDate, disableCloseOnSelect, isMobileKeyboardViewOpen, draftState.draft]);\n  const inputProps = React.useMemo(() => ({\n    onChange,\n    open: isOpen,\n    rawValue: value,\n    openPicker: () => setIsOpen(true)\n  }), [onChange, isOpen, value, setIsOpen]);\n  const pickerState = {\n    pickerProps,\n    inputProps,\n    wrapperProps\n  };\n  React.useDebugValue(pickerState, () => ({\n    MuiPickerState: {\n      pickerDraft: draftState,\n      other: pickerState\n    }\n  }));\n  return pickerState;\n}"]},"metadata":{},"sourceType":"module"}